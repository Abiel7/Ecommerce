openapi: 3.0.3
info:
  contact:
    email: abielkidane16@gmail.com
  description: api for ecommerce web applications
  title: Ecommerce App
  version: 1.0.0
servers:
- url: https://localhost:8080/
tags:
- description: Everything about cart
  name: cart
- description: Operation about orders
  name: order
- description: Operations about users
  name: user
- description: Operations about user's persona customer
  name: customer
- description: Operations about user's address
  name: address
- description: Operations about payments
  name: payment
- description: Operations about shippings
  name: shipping
- description: Operations about products
  name: product
paths:
  /api/v1/carts/{customerId}:
    delete:
      description: Deletes the shopping cart of given customer
      operationId: deleteCart
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: customerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: successful operation
        "404":
          content: {}
          description: Given customer ID doesn't exist
      summary: Delete the shopping cart
      tags:
      - cart
      x-accepts: application/json
    get:
      description: Returns the shopping cart of given customer
      operationId: getCartByCustomerId
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: customerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Cart'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Cart'
                type: array
          description: successful operation
        "404":
          content: {}
          description: Given customer ID doesn't exist
      summary: Returns the shopping cart
      tags:
      - cart
      x-accepts: application/json
  /api/v1/carts/{customerId}/items:
    get:
      description: Returns the items in shopping cart of given customer
      operationId: getCartItemsByCustomerId
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: customerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: successful operation
        "404":
          content: {}
          description: Given customer ID doesn't exist
      summary: Returns the list of products in user's shopping cart
      tags:
      - cart
      x-accepts: application/json
    post:
      description: Adds an item to the shopping cart if it doesn't already exist,
        or increment quantity by the specified number of items if it does.
      operationId: addCartItemsByCustomerId
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: customerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        description: Item object
      responses:
        "201":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: Item added successfully
        "404":
          content: {}
          description: Given customer ID doesn't exist
      summary: Adds an item in shopping cart
      tags:
      - cart
      x-contentType: application/xml
      x-accepts: application/json
    put:
      description: Adds an item to the shopping cart if it doesn't already exist,
        or replace with given item if it does.
      operationId: addOrReplaceItemsByCustomerId
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: customerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        description: Item object
      responses:
        "201":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: Item added successfully
        "404":
          content: {}
          description: Given customer ID doesn't exist
      summary: Replace/add an item in shopping cart
      tags:
      - cart
      x-contentType: application/xml
      x-accepts: application/json
  /api/v1/carts/{customerId}/items/{itemId}:
    delete:
      description: Deletes the item from shopping cart of given customer
      operationId: deleteItemFromCart
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: customerId
        required: true
        schema:
          type: string
        style: simple
      - description: Item (product) Identifier
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Accepts the request, regardless of whether the specified item
            exists in the cart or not.
      summary: Delete the item from shopping cart
      tags:
      - cart
      x-accepts: application/json
    get:
      description: Returns given item from shopping cart of given customer
      operationId: getCartItemsByItemId
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: customerId
        required: true
        schema:
          type: string
        style: simple
      - description: Item (product) Identifier
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: If item exists in cart
        "404":
          content: {}
          description: Given item (product) ID doesn't exist
      summary: Returns given item from user's shopping cart
      tags:
      - cart
      x-accepts: application/json
  /api/v1/orders:
    get:
      description: Returns orders of given user
      operationId: getOrdersByCustomerId
      parameters:
      - description: Customer Identifier
        explode: true
        in: query
        name: customerId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: If order exists.
        "404":
          content: {}
          description: Order doesn't exist for given user.
      summary: Returns the orders of given user
      tags:
      - order
      x-accepts: application/json
    post:
      description: Creates a new order for the given order request.
      operationId: addOrder
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/NewOrder'
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
        description: New Order Request object
      responses:
        "201":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: Order added successfully
        "406":
          content: {}
          description: If payment is not authorized.
      summary: Creates a new order for the given order request
      tags:
      - order
      x-contentType: application/xml
      x-accepts: application/json
  /api/v1/orders/{id}:
    get:
      description: Returns orders of given order ID
      operationId: getOrdersByOrderId
      parameters:
      - description: Order Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: If order exists.
        "404":
          content: {}
          description: Order doesn't exist for given user.
      summary: Returns the order of given order ID
      tags:
      - order
      x-accepts: application/json
  /api/v1/customers:
    get:
      description: Returns all customers, or empty collection if no use found
      operationId: getAllCustomers
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: For successful fetch.
      summary: Returns all customers
      tags:
      - customer
      x-accepts: application/json
  /api/v1/customers/{id}:
    delete:
      description: Deletes the customer identifiable by given ID
      operationId: deleteCustomerById
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content: {}
          description: Request accepted, returns this status even if user does not
            exist
      summary: Deletes the customer
      tags:
      - customer
      x-accepts: application/json
    get:
      description: Returns a customers identifiable by given ID
      operationId: getCustomerById
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: For successful fetch.
      summary: Returns a customer
      tags:
      - customer
      x-accepts: application/json
  /api/v1/customers/{id}/cards:
    get:
      description: Returns all customer's cards based on given customer ID
      operationId: getCardsByCustomerId
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Card'
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: For successful fetch.
      summary: Returns all customer's cards
      tags:
      - customer
      x-accepts: application/json
  /api/v1/customers/{id}/addresses:
    get:
      description: Returns all customer's addresses based on given customer ID
      operationId: getAddressesByCustomerId
      parameters:
      - description: Customer Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: For successful fetch.
      summary: Returns all customer's addresses
      tags:
      - customer
      x-accepts: application/json
  /api/v1/addresses:
    get:
      description: Returns all user's addresses, else empty collection
      operationId: getAllAddresses
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Address'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Address'
                type: array
          description: For successful fetch.
      summary: Returns all user's addresses
      tags:
      - address
      x-accepts: application/json
    post:
      description: Creates a new user addresses. Does nothing if address already exists.
      operationId: createAddress
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/AddAddressReq'
          application/json:
            schema:
              $ref: '#/components/schemas/AddAddressReq'
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: For successful fetch.
      summary: Creates a new user addresses
      tags:
      - address
      x-contentType: application/xml
      x-accepts: application/json
  /api/v1/addresses/{id}:
    delete:
      description: Deletes user's address based on given address ID.
      operationId: deleteAddressesById
      parameters:
      - description: address Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content: {}
          description: Accepts the deletion request and perform deletion. If ID does
            not exist, does nothing.
      summary: Deletes user's address
      tags:
      - address
      x-accepts: application/json
    get:
      description: Returns user's address based on given address ID.
      operationId: getAddressesById
      parameters:
      - description: address Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: For successful fetch.
      summary: Returns user's address
      tags:
      - address
      x-accepts: application/json
  /api/v1/cards:
    get:
      description: Returns all user's cards, else empty collection
      operationId: getAllCards
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Card'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Card'
                type: array
          description: For successful fetch.
      summary: Returns all user's cards
      tags:
      - card
      x-accepts: application/json
    post:
      description: Creates a new user addresses. Does nothing if address already exists.
      operationId: registerCard
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/AddCardReq'
          application/json:
            schema:
              $ref: '#/components/schemas/AddCardReq'
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: For successful fetch.
      summary: Creates a new user addresses
      tags:
      - card
      x-contentType: application/xml
      x-accepts: application/json
  /api/v1/cards/{id}:
    delete:
      description: Deletes card's address based on given card ID.
      operationId: deleteCardById
      parameters:
      - description: card Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content: {}
          description: Accepts the deletion request and perform deletion. If ID does
            not exist, does nothing.
      summary: Deletes card's address
      tags:
      - card
      x-accepts: application/json
    get:
      description: Returns user's card based on given card ID.
      operationId: getCardById
      parameters:
      - description: card Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Card'
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: For successful fetch.
      summary: Returns user's card
      tags:
      - card
      x-accepts: application/json
  /api/v1/payments:
    get:
      description: Return the payment authorization for the specified order
      operationId: getOrdersPaymentAuthorization
      parameters:
      - description: Order Identifier
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Authorization'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Authorization'
                type: array
          description: For successful fetch.
      summary: Returns the payment authorization
      tags:
      - payment
      x-accepts: application/json
    post:
      description: Authorize a payment request.
      operationId: authorize
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/PaymentReq'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentReq'
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Authorization'
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: For successful fetch.
      summary: Authorize a payment request
      tags:
      - payment
      x-contentType: application/xml
      x-accepts: application/json
  /api/v1/shipping:
    get:
      description: Return the Shipment for the specified order
      operationId: getShipmentByOrderId
      parameters:
      - description: Order Identifier
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Shipment'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Shipment'
                type: array
          description: For successful fetch.
      summary: Return the Shipment
      tags:
      - shipping
      x-accepts: application/json
    post:
      description: Ship the specified shipping request
      operationId: shipOrder
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ShippingReq'
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingReq'
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Authorization'
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: For successful fetch.
      summary: Ship the specified shipping request
      tags:
      - shipping
      x-contentType: application/xml
      x-accepts: application/json
  /api/v1/products:
    get:
      description: Returns the products that matches the given query criteria
      operationId: queryProducts
      parameters:
      - description: Product tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Product name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Query page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          format: int32
          type: integer
        style: form
      - description: Query page size
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
          description: For successful fetch.
      summary: Returns all the matched products
      tags:
      - product
      x-accepts: application/json
  /api/v1/products/{id}:
    get:
      description: Returns the product that matches the given product ID
      operationId: getProduct
      parameters:
      - description: Product Identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: For successful fetch.
      summary: Returns a product
      tags:
      - product
      x-accepts: application/json
components:
  schemas:
    Cart:
      description: Shopping Cart of the user
      example:
        customerId: customerId
        items:
        - unitPrice: 6.027456183070403
          quantity: 0
          id: id
        - unitPrice: 6.027456183070403
          quantity: 0
          id: id
      properties:
        customerId:
          description: Id of the customer who possesses the cart
          type: string
        items:
          description: Collection of items in cart.
          items:
            $ref: '#/components/schemas/Item'
          type: array
      type: object
    Item:
      description: Items in shopping cart
      example:
        unitPrice: 6.027456183070403
        quantity: 0
        id: id
      properties:
        id:
          description: Item Identifier
          type: string
        quantity:
          description: The item quantity
          format: int32
          type: integer
        unitPrice:
          description: The item's price per unit
          format: double
          type: number
      type: object
    Order:
      description: Represents an order
      example:
        date: 2000-01-23T04:56:07.000+00:00
        total: 1.4658129805029452
        address:
          residency: residency
          number: number
          country: country
          pincode: pincode
          city: city
          street: street
          state: state
        shipment:
          carrier: carrier
          estDeliveryDate: 2000-01-23
          orderId: orderId
          trackingNumber: trackingNumber
        payment:
          authorized: true
          message: message
        id: id
        items:
        - unitPrice: 6.027456183070403
          quantity: 0
          id: id
        - unitPrice: 6.027456183070403
          quantity: 0
          id: id
        card:
          expires: expires
          ccv: ccv
          cardNumber: cardNumber
        customer:
          firstName: firstName
          lastName: lastName
          password: password
          userStatus: 6
          phone: phone
          id: 0
          email: email
          username: username
        status: CREATED
      properties:
        id:
          description: Order identifier
          type: string
        customer:
          $ref: '#/components/schemas/User'
        address:
          $ref: '#/components/schemas/Address'
        card:
          $ref: '#/components/schemas/Card'
        date:
          description: Order's data and time details
          format: date-time
          type: string
        items:
          description: Collection of order items.
          items:
            $ref: '#/components/schemas/Item'
          type: array
        total:
          description: Order total
          format: double
          type: number
        payment:
          $ref: '#/components/schemas/Payment'
        shipment:
          $ref: '#/components/schemas/Shipment'
        status:
          description: Order Status
          enum:
          - CREATED
          - PAID
          - SHIPPED
          - PAYMENT_FAILED
          - SHIPMENT_FAILED
          - COMPLETED
          type: string
      type: object
      xml:
        name: Order
    AddAddressReq:
      allOf:
      - $ref: '#/components/schemas/Address'
      - $ref: '#/components/schemas/AddAddressReq_allOf'
      xml:
        name: AddAddressReq
    Address:
      example:
        residency: residency
        number: number
        country: country
        pincode: pincode
        city: city
        street: street
        state: state
      properties:
        number:
          description: house of flat number
          type: string
        residency:
          description: Socieity or building name
          type: string
        street:
          description: street name
          type: string
        city:
          description: city name
          type: string
        state:
          description: state name
          type: string
        country:
          description: country name
          type: string
        pincode:
          description: postal code
          type: string
      type: object
      xml:
        name: Address
    Card:
      example:
        expires: expires
        ccv: ccv
        cardNumber: cardNumber
      properties:
        cardNumber:
          description: Card Number
          type: string
        expires:
          description: Expiration date
          type: string
        ccv:
          description: CCV code
          type: string
      type: object
      xml:
        name: Card
    AddCardReq:
      allOf:
      - $ref: '#/components/schemas/Card'
      - $ref: '#/components/schemas/AddCardReq_allOf'
      description: Request object for new card registration.
      xml:
        name: AddCardReq
    Payment:
      example:
        authorized: true
        message: message
      properties:
        authorized:
          description: Flag that specified whether payment is authorized or not
          type: boolean
        message:
          description: Approval or rejection message
          type: string
      type: object
      xml:
        name: Payment
    Shipment:
      example:
        carrier: carrier
        estDeliveryDate: 2000-01-23
        orderId: orderId
        trackingNumber: trackingNumber
      properties:
        orderId:
          description: Order Identifier
          type: string
        carrier:
          description: Shipping Carrier
          type: string
        trackingNumber:
          description: Shipping Tracking Number
          type: string
        estDeliveryDate:
          description: Estimated Delivery Date
          format: date
          type: string
      type: object
      xml:
        name: Shipment
    ShippingReq:
      description: Contains information required for Shipping request
      example:
        address:
          residency: residency
          number: number
          country: country
          pincode: pincode
          city: city
          street: street
          state: state
        orderId: orderId
        itemCount: 0
      properties:
        orderId:
          description: Order Identifier
          type: string
        address:
          $ref: '#/components/schemas/Address'
        itemCount:
          description: The number of items in the order
          format: int32
          type: integer
      type: object
      xml:
        name: ShippingReq
    User:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          description: User Status
          format: int32
          type: integer
      type: object
      xml:
        name: User
    NewOrder:
      description: Contains the new order request information
      example: {}
      properties:
        customer:
          $ref: '#/components/schemas/URI'
        address:
          $ref: '#/components/schemas/URI'
        card:
          $ref: '#/components/schemas/URI'
        items:
          $ref: '#/components/schemas/URI'
      type: object
      xml:
        name: NewOrder
    URI:
      type: object
      xml:
        name: URI
    Authorization:
      example:
        orderId: orderId
        authorized: true
        time: 2000-01-23T04:56:07.000+00:00
        message: message
        error: error
      properties:
        orderId:
          description: Order Identification
          type: string
        time:
          description: Timestamp when this authorization was created
          format: date-time
          type: string
        authorized:
          description: Flat that specify whether the payment is authorized
          type: boolean
        message:
          description: Approavl or rejection message
          type: string
        error:
          description: Processing error description, if any
          type: string
      type: object
      xml:
        name: Authorization
    PaymentReq:
      description: Contains the payment request information
      example:
        amount: 0.8008281904610115
        address:
          residency: residency
          number: number
          country: country
          pincode: pincode
          city: city
          street: street
          state: state
        orderId: orderId
        card:
          expires: expires
          ccv: ccv
          cardNumber: cardNumber
        customer:
          firstName: firstName
          lastName: lastName
      properties:
        orderId:
          description: Order Identifier
          type: string
        customer:
          $ref: '#/components/schemas/CustomerInfoOnCard'
        address:
          $ref: '#/components/schemas/Address'
        card:
          $ref: '#/components/schemas/Card'
        amount:
          description: Payment amount
          format: double
          type: number
      type: object
      xml:
        name: PaymentReq
    CustomerInfoOnCard:
      description: Customer information required for payment processing
      example:
        firstName: firstName
        lastName: lastName
      properties:
        firstName:
          description: Customer first name
          type: string
        lastName:
          description: Customer last name
          type: string
      type: object
      xml:
        name: CustomerInfoOnCard
    Product:
      description: Product information
      example:
        price: 0.8008281904610115
        imageUrl: imageUrl
        name: name
        count: 6
        description: description
        id: id
        tag:
        - tag
        - tag
      properties:
        id:
          description: Product identifier
          type: string
        name:
          description: Product Name
          type: string
        description:
          description: Prodcut's description
          type: string
        imageUrl:
          description: Product image's URL
          type: string
        price:
          description: Product price
          format: double
          type: number
        count:
          description: Product count
          format: int32
          type: integer
        tag:
          description: Tags associated with the product
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    AddAddressReq_allOf:
      properties:
        userId:
          type: string
      type: object
    AddCardReq_allOf:
      properties:
        userId:
          type: object
      type: object

