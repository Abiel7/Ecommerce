openapi: 3.0.3
info:
  title: Ecommerce app
  description: the purpose of this api is to  demonstrate how ecommerce api can be designed
  version: 1.0.0
tags:
  - name: cart
    description: Everything about Cart
  - name: order
    description: Order Operation
  - name: user
    description: All operations about user
  - name: address
    description: adress operations
  - name: customer
    description: cutomer operations
  - name: product
    description: product operations
  - name: shipping
    description: shipment operations
  - name: payment
    description: payment operations
paths:
  /api/v1/carts/{customerId}:
    get:
      tags:
        - cart
      summary: Return customers shopping cart
      description: Returns customers shopping cart
      operationId: getCartByCustomerId
      parameters:
        - name: customerId
          in: path
          description: The customers Identification
          required: true
          schema:
            type: string
      responses:
        200:
          description: operation was successful
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        400:
          description: Given customer id does not exist
          content: { }
    delete:
      tags:
        - cart
      summary: delete the shopping cart of a given customerid
      description: delete shopping cart of agiven  customerid
      operationId: deleteCart
      parameters:
        - name: customerId
          in: path
          description: The customers Identification
          required: true
          schema:
            type: string
      responses:
        200:
          description: opperation successful
        400:
          description: customer id does not exist
          content: { }

  /api/v1/carts/{customerId}/item:
    get:
      tags:
        - cart
      summary: Returns user items that are stored on  customers Cart
      description: Return items  by  given  customre id
      operationId: getCartItemsByCutomerId
      parameters:
        - name: customerId
          in: path
          description: customer identifier
          required: true
          schema:
            type: string

      responses:
        200:
          description: succesfull operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        400:
          description: Given customer id is not present try with different
          content: { }
    post:
      tags:
        - cart
      summary: Add items to shoping cart
      description: Add items to customer shoping cart if the item is not present on cart, or increase the the quantity of items if the item already exist on the cart
      operationId: addItemsOnCartByCustomerId
      parameters:
        - name : customerId
          in: path
          description: customer identifier
          required:  true
          schema:
            type: string
      requestBody:
        description: items object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        200:
          description: operation succesfull
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: given cutomer identification is not present
          content:  { }
    put:
      tags:
        - cart
      summary: Replace/add an item in shopping cart
      description: Adds an item to the shopping cart if it doesn't already exist, or replace with given item if it does.
      operationId: addOrReplaceItemsByCustomerId
      parameters:
        - name: customerId
          in: path
          description: Customer Identifier
          required: true
          schema:
            type: string
      requestBody:
        description: Item object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        201:
          description: Item added successfully
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        404:
          description: Given customer ID doesn't exist
          content: { }
  /api/v1/carts/{customerId}/itetms/{itemId}:
    get:
      tags:
        - cart
      summary: Return items on customers cart
      description: Return items on  customers cart by given customer id and item id
      operationId: getCartItemById
      parameters:
        - name: customerId
          in: path
          description: customer identification
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: item or product identification
          required: true
          schema:
            type: string
      responses:
        200:
          description: operation succesfull items exist in cart
          content:
            application/xml:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Item'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: item does not exists operation failed
          content: { }
    delete:
      tags:
        - cart
      summary:  remove items on customer cart
      description: remove items from  customers cart by given customer id and item id
      operationId: removeItemsById
      parameters:
        - name: customerId
          in: path
          description: customer identification
          required: true
          schema:
            type: string
        -
components:
  schemas:
    Cart:
      description: Users ShoppingCart
      type: object
      properties:
        customerId:
          description: carts owner
          type: string
        items:
          description: user chosen items
          type: array
          items:
            $ref: '#/components/schemas/Item'
    Item:
      description: Items in shopping cart
      type: object
      properties:
        itemId:
          description:  the item identifier
          type: string
        quantity:
          description: The item Quantity
          type: number
          format: int32
        unitPrice :
          description: Price per unit
          type: number
          format: double
    Order:
      description: Order Representation
      type: object
      properties:
        id:
          description: order id
          type: string
        customer:
          $ref: '#/components/schemas/User'
        address:
          $ref: '#/components/schemas/Address'
        card:
          $ref: '#/components/schemas/Card'
        date:
          description: order date
          type: string
          format: date-time
        items:
          description: ordered items
          type: array
          items:
            $ref: '#/components/schemas/Item'
        total:
          description: total amount of the order
          type: number
          format: double
        shippment:
          $ref: '#/components/schemas/Shipment'
        payment:
          $ref: '#/components/schemas/Payment'
        status:
          description: order status an order can be on few status
          type: string
          enum:
            - CREATED
            - PAID
            - PAYMENT_FAILED
            - SHIPPED
            - SHIPPEMENT_FAILED
            - COMPLETED
      xml:
        name: Order


    User:
      description: Representation of a user
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: user Status
          format: int32
      xml:
        name: User


    AddAddresseReq:
      description: Request for new address registration or  modifie an existing one
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            userId:
              type: string
    Address:
      type: object
      properties:
        number:
          description: house number
          type: string
        residency:
          description: building name
          type: string
        street:
          description: street name
          type: string
        city:
          description: city name
          type: string
        state:
          description: state name
          type: string
        country:
          description: country name
          type: string
        postCode:
          description: postal area code
          type: string
      xml:
        name: Address
    Card:
      type: object
      properties:
        cardnumber:
          description: card number
          type: string
        expires:
          description: month and  year  of expiration
          type: string
        ccv:
          description: ccv code of a card
          type: string
      xml:
        name: Card

    AddCardReq:
      description: Request for new card registration
      allOf:
        - $ref: '#/components/schemas/Card'
        - type: object
          properties:
            userId:
              type: string
      xml:
        name: AddCardReq

    Payment:
      description: payment information
      type: object
      properties:
        authorized:
          description: check if a payment is  authorized before
          type: boolean
        message:
          description: Accept or Declined message
          type: string
      xml:
        name: Payment




    Shipment:
      description: shipment infomation
      type: object
      properties:
        orderid:
          description: order identification
          type: string
        carrier:
          description: shipping carrier
          type: string
        trackingNumber:
          description: shipment tracking number
          type: string
        estimateDelivieryDate:
          description: Estimated delivery date
          type: string
          format: date
      xml:
        name: Shippment



    ShippingReq:
      description: request for shipment
      type: object
      properties:
        orderid:
          description: order identification
          type: string
        addresse:
          $ref: '#/components/schemas/Address'
        itemcount:
          description: the number of items in the order
          type: integer
          format: int32
      xml:
        name: ShippingRequest

    NewOrder:
      description: request information for new order
      type: object
      properties:
        customer:
          #description: uri that is going to be used to fetch customer
          $ref: '#/components/schemas/URI'
        address:
          $ref: '#/components/schemas/URI'
        card:
          $ref: '#/components/schemas/URI'
        items:
          $ref: '#/components/schemas/URI'
      xml:
        name: NewOrder

    Authorization:
      description: payment authorization
      type: object
      properties:
        orderid:
          description: order identification
          type: string
        time:
          description: timestamp when the  authorization was  created
          type: string
          format: date-time
        authorized:
          description: is payment authorized
          type: boolean
        message:
          description: payment approval or  rejection
          type: string
        error:
          description: some error occured proccess that error if  any
          type: string

      xml:
        name: Authorization


    URI:
      type: object
      xml:
        name: URI

    CustomerInfoOnCard:
      description: customer infomation  requaired for payment pocessing
      type: object
      properties:
        firstName:
          description: customers first name
          type: string
        lastName:
          description: customers last  name
          type: string
      xml:
        name: CustomerInfoOnCard

    PaymentReq:
      description: Payment request information
      type: object
      properties:
        oderid:
          description: order identification
          type: string
        customer:
          $ref: '#/components/schemas/CustomerInfoOnCard'
        adresse:
          $ref: '#/components/schemas/Address'
        card:
          $ref: '#/components/schemas/Card'
        amount:
          description: Payment amount
          type: number
          format: double
      xml:
        name: PaymentReq

    Product:
      description: Product information
      type: object
      properties:
        id:
          description: unike product identifier
          type: string
        name:
          description: product name
          type: string
        description:
          description: product description
          type: string
        imageURL:
          description: image URL
          type: string
        price:
          description: product price
          type: number
          format: double
        count:
          description: product count
          type: integer
          format: int32
        tag:
          description: tag associated with the product
          type: array
          uniqueItems: true
          items:
            type: string

